import os
import json
import pickle
from rank_bm25 import BM25Okapi
from text_utils import tokenize_text # Import from the new utility file
from typing import List, Dict

class BM25Indexer:
    """
    A class to create and manage BM25 indices.
    This version supports creating an index directly from a list of chunks.
    """
    def __init__(self):
        print("Initializing BM25Indexer (v4)...")

    def create_and_save_bm25_index(self, chunks_with_metadata: List[Dict], output_index_path: str):
        """
        Creates a BM25 index from a list of text chunks with metadata
        and saves the index and chunk IDs to a pickle file.

        Args:
            chunks_with_metadata (List[Dict]): A list of dictionaries, each representing a chunk
                                                with 'content' and 'metadata'.
            output_index_path (str): The absolute path where the BM25 index will be saved.
        """
        print(f"Creating BM25 index for {len(chunks_with_metadata)} chunks...")
        if not chunks_with_metadata:
            print("No chunks provided. Cannot create index.")
            return

        corpus_contents = [chunk["content"] for chunk in chunks_with_metadata]
        chunk_ids = [chunk["metadata"]["chunk_id"] for chunk in chunks_with_metadata]

        # Tokenize the corpus
        print(f"Tokenizing {len(corpus_contents)} documents...")
        tokenized_corpus = [tokenize_text(doc) for doc in corpus_contents]
        print("Tokenization complete.")

        # Create the BM25 index
        bm25 = BM25Okapi(tokenized_corpus)
        print("BM25 index created successfully.")

        bm25_data = {
            "index": bm25,
            "chunk_ids": chunk_ids
        }

        print(f"Saving BM25 index to: {output_index_path}")
        try:
            os.makedirs(os.path.dirname(output_index_path), exist_ok=True)
            with open(output_index_path, "wb") as f_out:
                pickle.dump(bm25_data, f_out)
            print("BM25 index saved successfully.")
        except Exception as e:
            print(f"Error saving BM25 index to file: {e}")

if __name__ == "__main__":
    # Example Usage (for testing this module independently)
    # This assumes you have a text_chunks.json file generated by pdf_manager.py
    base_dir = os.path.dirname(os.path.abspath(__file__))
    pdf_name = "The-toyota-way-second-edition-chapter_1"
    pdf_specific_output_dir = os.path.join(base_dir, "pdf_files", "destination", pdf_name)
    
    chunks_json_file_path = os.path.join(pdf_specific_output_dir, "text_chunks.json")
    bm25_index_file_path = os.path.join(pdf_specific_output_dir, "bm25_index.pkl")

    try:
        with open(chunks_json_file_path, "r", encoding="utf-8") as f:
            test_chunks = json.load(f)
        
        indexer = BM25Indexer()
        indexer.create_and_save_bm25_index(test_chunks, bm25_index_file_path)

        print("\nTest complete. Check the output directory for bm25_index.pkl")

    except FileNotFoundError:
        print(f"Error: {chunks_json_file_path} not found. Please run pdf_manager.py first to generate chunks.")
    except Exception as e:
        print(f"An error occurred during testing: {e}")
